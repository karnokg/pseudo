Terminals unused in grammar

    T_PROGRAM
    T_ARRAY
    T_PRINT
    T_STRING
    T_SWAP
    T_DOT
    T_QUESTIONMARK
    T_STRING_VAL
    T_ENDOFFILE


State 47 conflicts: 7 shift/reduce
State 98 conflicts: 7 shift/reduce
State 99 conflicts: 7 shift/reduce
State 100 conflicts: 7 shift/reduce
State 101 conflicts: 7 shift/reduce
State 102 conflicts: 7 shift/reduce
State 103 conflicts: 7 shift/reduce
State 104 conflicts: 13 shift/reduce
State 105 conflicts: 13 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | stmts

    3 stmts: stmt
    4      | stmts stmt

    5 ident: T_IDENTIFIER

    6 stmt: var_decl close
    7     | func_decl
    8     | assign_stmt close
    9     | expr close
   10     | conditional close
   11     | loop_stmt close
   12     | return close

   13 func_decl: T_FUNCTION ident T_LPAREN func_decl_args T_RPAREN close block T_FUNCTION T_END

   14 func_decl_args: ε
   15               | var_decl
   16               | func_decl_args T_COMMA var_decl

   17 var_decl: ident T_COLON type_specifier T_ASSIGN expr
   18         | ident T_COLON ident

   19 assign_stmt: ident T_ASSIGN expr
   20            | vector_access T_ASSIGN expr
   21            | matrix_access T_ASSIGN expr

   22 conditional: T_IF expr T_THEN close block T_IF_END T_END
   23            | T_IF expr T_THEN close block T_ELSE close block T_IF_END T_END

   24 loop_stmt: T_ITERATE T_WHILE expr close block T_ITERATE T_END
   25          | T_ITERATE close block T_WHILE expr
   26          | T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO close block T_ITERATE T_END

   27 return: T_RETURN expr
   28       | T_RETURN

   29 block: T_INDENT stmts T_OUTDENT
   30      | T_INDENT T_OUTDENT

   31 close: T_COMMA
   32      | T_NEWLINE
   33      | close T_NEWLINE

   34 expr: func_call
   35     | ident
   36     | numeric
   37     | logical
   38     | vector
   39     | matrix
   40     | vector_access
   41     | matrix_access
   42     | binop_expr
   43     | boolean_expr
   44     | unaryop_expr
   45     | T_LPAREN expr T_RPAREN

   46 binop_expr: expr T_AND expr
   47           | expr T_OR expr
   48           | expr T_PLUS expr
   49           | expr T_MINUS expr
   50           | expr T_MUL expr
   51           | expr T_DIV expr
   52           | expr T_MODULUS expr

   53 comparison: T_LESS
   54           | T_GREATER
   55           | T_LESSEQ
   56           | T_GREATEREQ
   57           | T_EQ
   58           | T_NOTEQ

   59 boolean_expr: expr comparison expr

   60 unaryop_expr: T_NOT expr

   61 func_call: ident T_LPAREN call_args T_RPAREN

   62 call_args: ε
   63          | expr
   64          | call_args T_COMMA expr

   65 numeric: T_INTEGER_VAL
   66        | T_RATIONAL_VAL

   67 logical: T_TRUE
   68        | T_FALSE

   69 vector: T_CREATEVECTOR T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_RSBRACKET

   70 vector_access: ident T_LSBRACKET expr T_RSBRACKET

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_COMMA T_INTEGER_VAL T_RSBRACKET

   72 matrix_access: ident T_LSBRACKET expr T_COMMA expr T_RSBRACKET

   73 type_specifier: T_BOOLEAN
   74               | T_INTEGER
   75               | T_RATIONAL
   76               | T_VOID


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_PROGRAM (258)
    T_VOID (259) 76
    T_FUNCTION (260) 13
    T_END (261) 13 22 23 24 26
    T_IF (262) 22 23
    T_ELSE (263) 23
    T_THEN (264) 22 23
    T_IF_END (265) 22 23
    T_ITERATE (266) 24 25 26
    T_WHILE (267) 24 25
    T_FROM (268) 26
    T_TO (269) 26
    T_RETURN (270) 27 28
    T_BOOLEAN (271) 73
    T_INTEGER (272) 74
    T_RATIONAL (273) 75
    T_ARRAY (274)
    T_PRINT (275)
    T_STRING (276)
    T_NEWLINE (277) 32 33
    T_ASSIGN <token> (278) 17 19 20 21 26
    T_SWAP <token> (279)
    T_EQ <token> (280) 57
    T_NOTEQ <token> (281) 58
    T_LESS <token> (282) 53
    T_LESSEQ <token> (283) 55
    T_GREATER <token> (284) 54
    T_GREATEREQ <token> (285) 56
    T_PLUS <token> (286) 48
    T_MINUS <token> (287) 26 49
    T_DIV <token> (288) 51
    T_MUL <token> (289) 50
    T_MODULUS <token> (290) 52
    T_AND <token> (291) 46
    T_OR <token> (292) 47
    T_LPAREN <token> (293) 13 45 61 69 71
    T_RPAREN <token> (294) 13 45 61 69 71
    T_LSBRACKET <token> (295) 69 70 71 72
    T_RSBRACKET <token> (296) 69 70 71 72
    T_COMMA <token> (297) 16 31 64 71 72
    T_DOT <token> (298)
    T_NOT <token> (299) 60
    T_COLON <token> (300) 17 18
    T_QUESTIONMARK <token> (301)
    T_IDENTIFIER <string> (302) 5
    T_STRING_VAL <string> (303)
    T_TRUE <string> (304) 67
    T_FALSE <string> (305) 68
    T_INTEGER_VAL <integer> (306) 65 69 71
    T_RATIONAL_VAL <rational> (307) 66
    T_INDENT <token> (308) 29 30
    T_OUTDENT <token> (309) 29 30
    T_ENDOFFILE (310)
    T_CREATEVECTOR (311) 69
    T_CREATEMATRIX (312) 71


Nonterminals, with rules where they appear

    $accept (58)
        on left: 0
    program <block> (59)
        on left: 1 2
        on right: 0
    stmts <block> (60)
        on left: 3 4
        on right: 2 4 29
    ident <ident> (61)
        on left: 5
        on right: 13 17 18 19 26 35 61 70 72
    stmt <stmt> (62)
        on left: 6 7 8 9 10 11 12
        on right: 3 4
    func_decl (63)
        on left: 13
        on right: 7
    func_decl_args (64)
        on left: 14 15 16
        on right: 13 16
    var_decl <stmt> (65)
        on left: 17 18
        on right: 6 15 16
    assign_stmt <stmt> (66)
        on left: 19 20 21
        on right: 8
    conditional <stmt> (67)
        on left: 22 23
        on right: 10
    loop_stmt <stmt> (68)
        on left: 24 25 26
        on right: 11
    return <stmt> (69)
        on left: 27 28
        on right: 12
    block <block> (70)
        on left: 29 30
        on right: 13 22 23 24 25 26
    close (71)
        on left: 31 32 33
        on right: 6 8 9 10 11 12 13 22 23 24 25 26 33
    expr <expr> (72)
        on left: 34 35 36 37 38 39 40 41 42 43 44 45
        on right: 9 17 19 20 21 22 23 24 25 26 27 45 46 47 48 49 50 51 52 59 60 63 64 70 72
    binop_expr <expr> (73)
        on left: 46 47 48 49 50 51 52
        on right: 42
    comparison <token> (74)
        on left: 53 54 55 56 57 58
        on right: 59
    boolean_expr <expr> (75)
        on left: 59
        on right: 43
    unaryop_expr <expr> (76)
        on left: 60
        on right: 44
    func_call <expr> (77)
        on left: 61
        on right: 34
    call_args <exprlist> (78)
        on left: 62 63 64
        on right: 61 64
    numeric <expr> (79)
        on left: 65 66
        on right: 36
    logical <expr> (80)
        on left: 67 68
        on right: 37
    vector <expr> (81)
        on left: 69
        on right: 38
    vector_access <vecaccess> (82)
        on left: 70
        on right: 20 40
    matrix <expr> (83)
        on left: 71
        on right: 39
    matrix_access <vecaccess> (84)
        on left: 72
        on right: 21 41
    type_specifier <ident> (85)
        on left: 73 74 75 76
        on right: 17 69 71


State 0

    0 $accept: • program $end

    T_FUNCTION      shift, and go to state 1
    T_IF            shift, and go to state 2
    T_ITERATE       shift, and go to state 3
    T_RETURN        shift, and go to state 4
    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    $default  reduce using rule 1 (program)

    program        go to state 14
    stmts          go to state 15
    ident          go to state 16
    stmt           go to state 17
    func_decl      go to state 18
    var_decl       go to state 19
    assign_stmt    go to state 20
    conditional    go to state 21
    loop_stmt      go to state 22
    return         go to state 23
    expr           go to state 24
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 32
    matrix         go to state 33
    matrix_access  go to state 34


State 1

   13 func_decl: T_FUNCTION • ident T_LPAREN func_decl_args T_RPAREN close block T_FUNCTION T_END

    T_IDENTIFIER  shift, and go to state 7

    ident  go to state 35


State 2

   22 conditional: T_IF • expr T_THEN close block T_IF_END T_END
   23            | T_IF • expr T_THEN close block T_ELSE close block T_IF_END T_END

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 37
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 3

   24 loop_stmt: T_ITERATE • T_WHILE expr close block T_ITERATE T_END
   25          | T_ITERATE • close block T_WHILE expr
   26          | T_ITERATE • ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO close block T_ITERATE T_END

    T_WHILE       shift, and go to state 40
    T_NEWLINE     shift, and go to state 41
    T_COMMA       shift, and go to state 42
    T_IDENTIFIER  shift, and go to state 7

    ident  go to state 43
    close  go to state 44


State 4

   27 return: T_RETURN • expr
   28       | T_RETURN •

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    $default  reduce using rule 28 (return)

    ident          go to state 36
    expr           go to state 45
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 5

   45 expr: T_LPAREN • expr T_RPAREN

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 46
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 6

   60 unaryop_expr: T_NOT • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 47
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 7

    5 ident: T_IDENTIFIER •

    $default  reduce using rule 5 (ident)


State 8

   67 logical: T_TRUE •

    $default  reduce using rule 67 (logical)


State 9

   68 logical: T_FALSE •

    $default  reduce using rule 68 (logical)


State 10

   65 numeric: T_INTEGER_VAL •

    $default  reduce using rule 65 (numeric)


State 11

   66 numeric: T_RATIONAL_VAL •

    $default  reduce using rule 66 (numeric)


State 12

   69 vector: T_CREATEVECTOR • T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_RSBRACKET

    T_LPAREN  shift, and go to state 48


State 13

   71 matrix: T_CREATEMATRIX • T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_COMMA T_INTEGER_VAL T_RSBRACKET

    T_LPAREN  shift, and go to state 49


State 14

    0 $accept: program • $end

    $end  shift, and go to state 50


State 15

    2 program: stmts •
    4 stmts: stmts • stmt

    T_FUNCTION      shift, and go to state 1
    T_IF            shift, and go to state 2
    T_ITERATE       shift, and go to state 3
    T_RETURN        shift, and go to state 4
    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    $default  reduce using rule 2 (program)

    ident          go to state 16
    stmt           go to state 51
    func_decl      go to state 18
    var_decl       go to state 19
    assign_stmt    go to state 20
    conditional    go to state 21
    loop_stmt      go to state 22
    return         go to state 23
    expr           go to state 24
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 32
    matrix         go to state 33
    matrix_access  go to state 34


State 16

   17 var_decl: ident • T_COLON type_specifier T_ASSIGN expr
   18         | ident • T_COLON ident
   19 assign_stmt: ident • T_ASSIGN expr
   35 expr: ident •
   61 func_call: ident • T_LPAREN call_args T_RPAREN
   70 vector_access: ident • T_LSBRACKET expr T_RSBRACKET
   72 matrix_access: ident • T_LSBRACKET expr T_COMMA expr T_RSBRACKET

    T_ASSIGN     shift, and go to state 52
    T_LPAREN     shift, and go to state 53
    T_LSBRACKET  shift, and go to state 54
    T_COLON      shift, and go to state 55

    $default  reduce using rule 35 (expr)


State 17

    3 stmts: stmt •

    $default  reduce using rule 3 (stmts)


State 18

    7 stmt: func_decl •

    $default  reduce using rule 7 (stmt)


State 19

    6 stmt: var_decl • close

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 56


State 20

    8 stmt: assign_stmt • close

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 57


State 21

   10 stmt: conditional • close

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 58


State 22

   11 stmt: loop_stmt • close

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 59


State 23

   12 stmt: return • close

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 60


State 24

    9 stmt: expr • close
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_NEWLINE    shift, and go to state 41
    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73
    T_COMMA      shift, and go to state 42

    close       go to state 74
    comparison  go to state 75


State 25

   42 expr: binop_expr •

    $default  reduce using rule 42 (expr)


State 26

   43 expr: boolean_expr •

    $default  reduce using rule 43 (expr)


State 27

   44 expr: unaryop_expr •

    $default  reduce using rule 44 (expr)


State 28

   34 expr: func_call •

    $default  reduce using rule 34 (expr)


State 29

   36 expr: numeric •

    $default  reduce using rule 36 (expr)


State 30

   37 expr: logical •

    $default  reduce using rule 37 (expr)


State 31

   38 expr: vector •

    $default  reduce using rule 38 (expr)


State 32

   20 assign_stmt: vector_access • T_ASSIGN expr
   40 expr: vector_access •

    T_ASSIGN  shift, and go to state 76

    $default  reduce using rule 40 (expr)


State 33

   39 expr: matrix •

    $default  reduce using rule 39 (expr)


State 34

   21 assign_stmt: matrix_access • T_ASSIGN expr
   41 expr: matrix_access •

    T_ASSIGN  shift, and go to state 77

    $default  reduce using rule 41 (expr)


State 35

   13 func_decl: T_FUNCTION ident • T_LPAREN func_decl_args T_RPAREN close block T_FUNCTION T_END

    T_LPAREN  shift, and go to state 78


State 36

   35 expr: ident •
   61 func_call: ident • T_LPAREN call_args T_RPAREN
   70 vector_access: ident • T_LSBRACKET expr T_RSBRACKET
   72 matrix_access: ident • T_LSBRACKET expr T_COMMA expr T_RSBRACKET

    T_LPAREN     shift, and go to state 53
    T_LSBRACKET  shift, and go to state 54

    $default  reduce using rule 35 (expr)


State 37

   22 conditional: T_IF expr • T_THEN close block T_IF_END T_END
   23            | T_IF expr • T_THEN close block T_ELSE close block T_IF_END T_END
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_THEN       shift, and go to state 79
    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    comparison  go to state 75


State 38

   40 expr: vector_access •

    $default  reduce using rule 40 (expr)


State 39

   41 expr: matrix_access •

    $default  reduce using rule 41 (expr)


State 40

   24 loop_stmt: T_ITERATE T_WHILE • expr close block T_ITERATE T_END

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 80
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 41

   32 close: T_NEWLINE •

    $default  reduce using rule 32 (close)


State 42

   31 close: T_COMMA •

    $default  reduce using rule 31 (close)


State 43

   26 loop_stmt: T_ITERATE ident • T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO close block T_ITERATE T_END

    T_ASSIGN  shift, and go to state 81


State 44

   25 loop_stmt: T_ITERATE close • block T_WHILE expr
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82
    T_INDENT   shift, and go to state 83

    block  go to state 84


State 45

   27 return: T_RETURN expr •
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 27 (return)

    comparison  go to state 75


State 46

   45 expr: T_LPAREN expr • T_RPAREN
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73
    T_RPAREN     shift, and go to state 85

    comparison  go to state 75


State 47

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr
   60 unaryop_expr: T_NOT expr •

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 60 (unaryop_expr)]
    T_NOTEQ      [reduce using rule 60 (unaryop_expr)]
    T_LESS       [reduce using rule 60 (unaryop_expr)]
    T_LESSEQ     [reduce using rule 60 (unaryop_expr)]
    T_GREATER    [reduce using rule 60 (unaryop_expr)]
    T_GREATEREQ  [reduce using rule 60 (unaryop_expr)]
    T_OR         [reduce using rule 60 (unaryop_expr)]
    $default     reduce using rule 60 (unaryop_expr)

    comparison  go to state 75

    Conflict between rule 60 and token T_PLUS resolved as reduce (T_PLUS < T_NOT).
    Conflict between rule 60 and token T_MINUS resolved as reduce (T_MINUS < T_NOT).
    Conflict between rule 60 and token T_DIV resolved as reduce (T_DIV < T_NOT).
    Conflict between rule 60 and token T_MUL resolved as reduce (T_MUL < T_NOT).
    Conflict between rule 60 and token T_MODULUS resolved as reduce (T_MODULUS < T_NOT).
    Conflict between rule 60 and token T_AND resolved as reduce (%left T_AND).


State 48

   69 vector: T_CREATEVECTOR T_LPAREN • type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_RSBRACKET

    T_VOID      shift, and go to state 86
    T_BOOLEAN   shift, and go to state 87
    T_INTEGER   shift, and go to state 88
    T_RATIONAL  shift, and go to state 89

    type_specifier  go to state 90


State 49

   71 matrix: T_CREATEMATRIX T_LPAREN • type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_COMMA T_INTEGER_VAL T_RSBRACKET

    T_VOID      shift, and go to state 86
    T_BOOLEAN   shift, and go to state 87
    T_INTEGER   shift, and go to state 88
    T_RATIONAL  shift, and go to state 89

    type_specifier  go to state 91


State 50

    0 $accept: program $end •

    $default  accept


State 51

    4 stmts: stmts stmt •

    $default  reduce using rule 4 (stmts)


State 52

   19 assign_stmt: ident T_ASSIGN • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 92
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 53

   61 func_call: ident T_LPAREN • call_args T_RPAREN

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    $default  reduce using rule 62 (call_args)

    ident          go to state 36
    expr           go to state 93
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    call_args      go to state 94
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 54

   70 vector_access: ident T_LSBRACKET • expr T_RSBRACKET
   72 matrix_access: ident T_LSBRACKET • expr T_COMMA expr T_RSBRACKET

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 95
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 55

   17 var_decl: ident T_COLON • type_specifier T_ASSIGN expr
   18         | ident T_COLON • ident

    T_VOID        shift, and go to state 86
    T_BOOLEAN     shift, and go to state 87
    T_INTEGER     shift, and go to state 88
    T_RATIONAL    shift, and go to state 89
    T_IDENTIFIER  shift, and go to state 7

    ident           go to state 96
    type_specifier  go to state 97


State 56

    6 stmt: var_decl close •
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82

    $default  reduce using rule 6 (stmt)


State 57

    8 stmt: assign_stmt close •
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82

    $default  reduce using rule 8 (stmt)


State 58

   10 stmt: conditional close •
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82

    $default  reduce using rule 10 (stmt)


State 59

   11 stmt: loop_stmt close •
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82

    $default  reduce using rule 11 (stmt)


State 60

   12 stmt: return close •
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82

    $default  reduce using rule 12 (stmt)


State 61

   57 comparison: T_EQ •

    $default  reduce using rule 57 (comparison)


State 62

   58 comparison: T_NOTEQ •

    $default  reduce using rule 58 (comparison)


State 63

   53 comparison: T_LESS •

    $default  reduce using rule 53 (comparison)


State 64

   55 comparison: T_LESSEQ •

    $default  reduce using rule 55 (comparison)


State 65

   54 comparison: T_GREATER •

    $default  reduce using rule 54 (comparison)


State 66

   56 comparison: T_GREATEREQ •

    $default  reduce using rule 56 (comparison)


State 67

   48 binop_expr: expr T_PLUS • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 98
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 68

   49 binop_expr: expr T_MINUS • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 99
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 69

   51 binop_expr: expr T_DIV • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 100
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 70

   50 binop_expr: expr T_MUL • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 101
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 71

   52 binop_expr: expr T_MODULUS • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 102
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 72

   46 binop_expr: expr T_AND • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 103
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 73

   47 binop_expr: expr T_OR • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 104
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 74

    9 stmt: expr close •
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82

    $default  reduce using rule 9 (stmt)


State 75

   59 boolean_expr: expr comparison • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 105
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 76

   20 assign_stmt: vector_access T_ASSIGN • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 106
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 77

   21 assign_stmt: matrix_access T_ASSIGN • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 107
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 78

   13 func_decl: T_FUNCTION ident T_LPAREN • func_decl_args T_RPAREN close block T_FUNCTION T_END

    T_IDENTIFIER  shift, and go to state 7

    $default  reduce using rule 14 (func_decl_args)

    ident           go to state 108
    func_decl_args  go to state 109
    var_decl        go to state 110


State 79

   22 conditional: T_IF expr T_THEN • close block T_IF_END T_END
   23            | T_IF expr T_THEN • close block T_ELSE close block T_IF_END T_END

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 111


State 80

   24 loop_stmt: T_ITERATE T_WHILE expr • close block T_ITERATE T_END
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_NEWLINE    shift, and go to state 41
    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73
    T_COMMA      shift, and go to state 42

    close       go to state 112
    comparison  go to state 75


State 81

   26 loop_stmt: T_ITERATE ident T_ASSIGN • expr T_MINUS T_FROM expr T_MINUS T_TO close block T_ITERATE T_END

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 113
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 82

   33 close: close T_NEWLINE •

    $default  reduce using rule 33 (close)


State 83

   29 block: T_INDENT • stmts T_OUTDENT
   30      | T_INDENT • T_OUTDENT

    T_FUNCTION      shift, and go to state 1
    T_IF            shift, and go to state 2
    T_ITERATE       shift, and go to state 3
    T_RETURN        shift, and go to state 4
    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_OUTDENT       shift, and go to state 114
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    stmts          go to state 115
    ident          go to state 16
    stmt           go to state 17
    func_decl      go to state 18
    var_decl       go to state 19
    assign_stmt    go to state 20
    conditional    go to state 21
    loop_stmt      go to state 22
    return         go to state 23
    expr           go to state 24
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 32
    matrix         go to state 33
    matrix_access  go to state 34


State 84

   25 loop_stmt: T_ITERATE close block • T_WHILE expr

    T_WHILE  shift, and go to state 116


State 85

   45 expr: T_LPAREN expr T_RPAREN •

    $default  reduce using rule 45 (expr)


State 86

   76 type_specifier: T_VOID •

    $default  reduce using rule 76 (type_specifier)


State 87

   73 type_specifier: T_BOOLEAN •

    $default  reduce using rule 73 (type_specifier)


State 88

   74 type_specifier: T_INTEGER •

    $default  reduce using rule 74 (type_specifier)


State 89

   75 type_specifier: T_RATIONAL •

    $default  reduce using rule 75 (type_specifier)


State 90

   69 vector: T_CREATEVECTOR T_LPAREN type_specifier • T_RPAREN T_LSBRACKET T_INTEGER_VAL T_RSBRACKET

    T_RPAREN  shift, and go to state 117


State 91

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier • T_RPAREN T_LSBRACKET T_INTEGER_VAL T_COMMA T_INTEGER_VAL T_RSBRACKET

    T_RPAREN  shift, and go to state 118


State 92

   19 assign_stmt: ident T_ASSIGN expr •
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 19 (assign_stmt)

    comparison  go to state 75


State 93

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr
   63 call_args: expr •

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 63 (call_args)

    comparison  go to state 75


State 94

   61 func_call: ident T_LPAREN call_args • T_RPAREN
   64 call_args: call_args • T_COMMA expr

    T_RPAREN  shift, and go to state 119
    T_COMMA   shift, and go to state 120


State 95

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr
   70 vector_access: ident T_LSBRACKET expr • T_RSBRACKET
   72 matrix_access: ident T_LSBRACKET expr • T_COMMA expr T_RSBRACKET

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73
    T_RSBRACKET  shift, and go to state 121
    T_COMMA      shift, and go to state 122

    comparison  go to state 75


State 96

   18 var_decl: ident T_COLON ident •

    $default  reduce using rule 18 (var_decl)


State 97

   17 var_decl: ident T_COLON type_specifier • T_ASSIGN expr

    T_ASSIGN  shift, and go to state 123


State 98

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   48           | expr T_PLUS expr •
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 48 (binop_expr)]
    T_NOTEQ      [reduce using rule 48 (binop_expr)]
    T_LESS       [reduce using rule 48 (binop_expr)]
    T_LESSEQ     [reduce using rule 48 (binop_expr)]
    T_GREATER    [reduce using rule 48 (binop_expr)]
    T_GREATEREQ  [reduce using rule 48 (binop_expr)]
    T_OR         [reduce using rule 48 (binop_expr)]
    $default     reduce using rule 48 (binop_expr)

    comparison  go to state 75

    Conflict between rule 48 and token T_PLUS resolved as reduce (%left T_PLUS).
    Conflict between rule 48 and token T_MINUS resolved as reduce (%left T_MINUS).
    Conflict between rule 48 and token T_DIV resolved as shift (T_PLUS < T_DIV).
    Conflict between rule 48 and token T_MUL resolved as shift (T_PLUS < T_MUL).
    Conflict between rule 48 and token T_MODULUS resolved as shift (T_PLUS < T_MODULUS).
    Conflict between rule 48 and token T_AND resolved as shift (T_PLUS < T_AND).


State 99

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   49           | expr T_MINUS expr •
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 49 (binop_expr)]
    T_NOTEQ      [reduce using rule 49 (binop_expr)]
    T_LESS       [reduce using rule 49 (binop_expr)]
    T_LESSEQ     [reduce using rule 49 (binop_expr)]
    T_GREATER    [reduce using rule 49 (binop_expr)]
    T_GREATEREQ  [reduce using rule 49 (binop_expr)]
    T_OR         [reduce using rule 49 (binop_expr)]
    $default     reduce using rule 49 (binop_expr)

    comparison  go to state 75

    Conflict between rule 49 and token T_PLUS resolved as reduce (%left T_PLUS).
    Conflict between rule 49 and token T_MINUS resolved as reduce (%left T_MINUS).
    Conflict between rule 49 and token T_DIV resolved as shift (T_MINUS < T_DIV).
    Conflict between rule 49 and token T_MUL resolved as shift (T_MINUS < T_MUL).
    Conflict between rule 49 and token T_MODULUS resolved as shift (T_MINUS < T_MODULUS).
    Conflict between rule 49 and token T_AND resolved as shift (T_MINUS < T_AND).


State 100

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   51           | expr T_DIV expr •
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 51 (binop_expr)]
    T_NOTEQ      [reduce using rule 51 (binop_expr)]
    T_LESS       [reduce using rule 51 (binop_expr)]
    T_LESSEQ     [reduce using rule 51 (binop_expr)]
    T_GREATER    [reduce using rule 51 (binop_expr)]
    T_GREATEREQ  [reduce using rule 51 (binop_expr)]
    T_OR         [reduce using rule 51 (binop_expr)]
    $default     reduce using rule 51 (binop_expr)

    comparison  go to state 75

    Conflict between rule 51 and token T_PLUS resolved as reduce (T_PLUS < T_DIV).
    Conflict between rule 51 and token T_MINUS resolved as reduce (T_MINUS < T_DIV).
    Conflict between rule 51 and token T_DIV resolved as reduce (%left T_DIV).
    Conflict between rule 51 and token T_MUL resolved as reduce (%left T_MUL).
    Conflict between rule 51 and token T_MODULUS resolved as reduce (%left T_MODULUS).
    Conflict between rule 51 and token T_AND resolved as shift (T_DIV < T_AND).


State 101

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   50           | expr T_MUL expr •
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 50 (binop_expr)]
    T_NOTEQ      [reduce using rule 50 (binop_expr)]
    T_LESS       [reduce using rule 50 (binop_expr)]
    T_LESSEQ     [reduce using rule 50 (binop_expr)]
    T_GREATER    [reduce using rule 50 (binop_expr)]
    T_GREATEREQ  [reduce using rule 50 (binop_expr)]
    T_OR         [reduce using rule 50 (binop_expr)]
    $default     reduce using rule 50 (binop_expr)

    comparison  go to state 75

    Conflict between rule 50 and token T_PLUS resolved as reduce (T_PLUS < T_MUL).
    Conflict between rule 50 and token T_MINUS resolved as reduce (T_MINUS < T_MUL).
    Conflict between rule 50 and token T_DIV resolved as reduce (%left T_DIV).
    Conflict between rule 50 and token T_MUL resolved as reduce (%left T_MUL).
    Conflict between rule 50 and token T_MODULUS resolved as reduce (%left T_MODULUS).
    Conflict between rule 50 and token T_AND resolved as shift (T_MUL < T_AND).


State 102

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   52           | expr T_MODULUS expr •
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 52 (binop_expr)]
    T_NOTEQ      [reduce using rule 52 (binop_expr)]
    T_LESS       [reduce using rule 52 (binop_expr)]
    T_LESSEQ     [reduce using rule 52 (binop_expr)]
    T_GREATER    [reduce using rule 52 (binop_expr)]
    T_GREATEREQ  [reduce using rule 52 (binop_expr)]
    T_OR         [reduce using rule 52 (binop_expr)]
    $default     reduce using rule 52 (binop_expr)

    comparison  go to state 75

    Conflict between rule 52 and token T_PLUS resolved as reduce (T_PLUS < T_MODULUS).
    Conflict between rule 52 and token T_MINUS resolved as reduce (T_MINUS < T_MODULUS).
    Conflict between rule 52 and token T_DIV resolved as reduce (%left T_DIV).
    Conflict between rule 52 and token T_MUL resolved as reduce (%left T_MUL).
    Conflict between rule 52 and token T_MODULUS resolved as reduce (%left T_MODULUS).
    Conflict between rule 52 and token T_AND resolved as shift (T_MODULUS < T_AND).


State 103

   46 binop_expr: expr • T_AND expr
   46           | expr T_AND expr •
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 46 (binop_expr)]
    T_NOTEQ      [reduce using rule 46 (binop_expr)]
    T_LESS       [reduce using rule 46 (binop_expr)]
    T_LESSEQ     [reduce using rule 46 (binop_expr)]
    T_GREATER    [reduce using rule 46 (binop_expr)]
    T_GREATEREQ  [reduce using rule 46 (binop_expr)]
    T_OR         [reduce using rule 46 (binop_expr)]
    $default     reduce using rule 46 (binop_expr)

    comparison  go to state 75

    Conflict between rule 46 and token T_PLUS resolved as reduce (T_PLUS < T_AND).
    Conflict between rule 46 and token T_MINUS resolved as reduce (T_MINUS < T_AND).
    Conflict between rule 46 and token T_DIV resolved as reduce (T_DIV < T_AND).
    Conflict between rule 46 and token T_MUL resolved as reduce (T_MUL < T_AND).
    Conflict between rule 46 and token T_MODULUS resolved as reduce (T_MODULUS < T_AND).
    Conflict between rule 46 and token T_AND resolved as reduce (%left T_AND).


State 104

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   47           | expr T_OR expr •
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 47 (binop_expr)]
    T_NOTEQ      [reduce using rule 47 (binop_expr)]
    T_LESS       [reduce using rule 47 (binop_expr)]
    T_LESSEQ     [reduce using rule 47 (binop_expr)]
    T_GREATER    [reduce using rule 47 (binop_expr)]
    T_GREATEREQ  [reduce using rule 47 (binop_expr)]
    T_PLUS       [reduce using rule 47 (binop_expr)]
    T_MINUS      [reduce using rule 47 (binop_expr)]
    T_DIV        [reduce using rule 47 (binop_expr)]
    T_MUL        [reduce using rule 47 (binop_expr)]
    T_MODULUS    [reduce using rule 47 (binop_expr)]
    T_AND        [reduce using rule 47 (binop_expr)]
    T_OR         [reduce using rule 47 (binop_expr)]
    $default     reduce using rule 47 (binop_expr)

    comparison  go to state 75


State 105

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr
   59             | expr comparison expr •

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    T_EQ         [reduce using rule 59 (boolean_expr)]
    T_NOTEQ      [reduce using rule 59 (boolean_expr)]
    T_LESS       [reduce using rule 59 (boolean_expr)]
    T_LESSEQ     [reduce using rule 59 (boolean_expr)]
    T_GREATER    [reduce using rule 59 (boolean_expr)]
    T_GREATEREQ  [reduce using rule 59 (boolean_expr)]
    T_PLUS       [reduce using rule 59 (boolean_expr)]
    T_MINUS      [reduce using rule 59 (boolean_expr)]
    T_DIV        [reduce using rule 59 (boolean_expr)]
    T_MUL        [reduce using rule 59 (boolean_expr)]
    T_MODULUS    [reduce using rule 59 (boolean_expr)]
    T_AND        [reduce using rule 59 (boolean_expr)]
    T_OR         [reduce using rule 59 (boolean_expr)]
    $default     reduce using rule 59 (boolean_expr)

    comparison  go to state 75


State 106

   20 assign_stmt: vector_access T_ASSIGN expr •
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 20 (assign_stmt)

    comparison  go to state 75


State 107

   21 assign_stmt: matrix_access T_ASSIGN expr •
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 21 (assign_stmt)

    comparison  go to state 75


State 108

   17 var_decl: ident • T_COLON type_specifier T_ASSIGN expr
   18         | ident • T_COLON ident

    T_COLON  shift, and go to state 55


State 109

   13 func_decl: T_FUNCTION ident T_LPAREN func_decl_args • T_RPAREN close block T_FUNCTION T_END
   16 func_decl_args: func_decl_args • T_COMMA var_decl

    T_RPAREN  shift, and go to state 124
    T_COMMA   shift, and go to state 125


State 110

   15 func_decl_args: var_decl •

    $default  reduce using rule 15 (func_decl_args)


State 111

   22 conditional: T_IF expr T_THEN close • block T_IF_END T_END
   23            | T_IF expr T_THEN close • block T_ELSE close block T_IF_END T_END
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82
    T_INDENT   shift, and go to state 83

    block  go to state 126


State 112

   24 loop_stmt: T_ITERATE T_WHILE expr close • block T_ITERATE T_END
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82
    T_INDENT   shift, and go to state 83

    block  go to state 127


State 113

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr • T_MINUS T_FROM expr T_MINUS T_TO close block T_ITERATE T_END
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 128
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    comparison  go to state 75


State 114

   30 block: T_INDENT T_OUTDENT •

    $default  reduce using rule 30 (block)


State 115

    4 stmts: stmts • stmt
   29 block: T_INDENT stmts • T_OUTDENT

    T_FUNCTION      shift, and go to state 1
    T_IF            shift, and go to state 2
    T_ITERATE       shift, and go to state 3
    T_RETURN        shift, and go to state 4
    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_OUTDENT       shift, and go to state 129
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 16
    stmt           go to state 51
    func_decl      go to state 18
    var_decl       go to state 19
    assign_stmt    go to state 20
    conditional    go to state 21
    loop_stmt      go to state 22
    return         go to state 23
    expr           go to state 24
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 32
    matrix         go to state 33
    matrix_access  go to state 34


State 116

   25 loop_stmt: T_ITERATE close block T_WHILE • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 130
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 117

   69 vector: T_CREATEVECTOR T_LPAREN type_specifier T_RPAREN • T_LSBRACKET T_INTEGER_VAL T_RSBRACKET

    T_LSBRACKET  shift, and go to state 131


State 118

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier T_RPAREN • T_LSBRACKET T_INTEGER_VAL T_COMMA T_INTEGER_VAL T_RSBRACKET

    T_LSBRACKET  shift, and go to state 132


State 119

   61 func_call: ident T_LPAREN call_args T_RPAREN •

    $default  reduce using rule 61 (func_call)


State 120

   64 call_args: call_args T_COMMA • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 133
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 121

   70 vector_access: ident T_LSBRACKET expr T_RSBRACKET •

    $default  reduce using rule 70 (vector_access)


State 122

   72 matrix_access: ident T_LSBRACKET expr T_COMMA • expr T_RSBRACKET

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 134
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 123

   17 var_decl: ident T_COLON type_specifier T_ASSIGN • expr

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 135
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 124

   13 func_decl: T_FUNCTION ident T_LPAREN func_decl_args T_RPAREN • close block T_FUNCTION T_END

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 136


State 125

   16 func_decl_args: func_decl_args T_COMMA • var_decl

    T_IDENTIFIER  shift, and go to state 7

    ident     go to state 108
    var_decl  go to state 137


State 126

   22 conditional: T_IF expr T_THEN close block • T_IF_END T_END
   23            | T_IF expr T_THEN close block • T_ELSE close block T_IF_END T_END

    T_ELSE    shift, and go to state 138
    T_IF_END  shift, and go to state 139


State 127

   24 loop_stmt: T_ITERATE T_WHILE expr close block • T_ITERATE T_END

    T_ITERATE  shift, and go to state 140


State 128

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS • T_FROM expr T_MINUS T_TO close block T_ITERATE T_END
   49 binop_expr: expr T_MINUS • expr

    T_FROM          shift, and go to state 141
    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 99
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 129

   29 block: T_INDENT stmts T_OUTDENT •

    $default  reduce using rule 29 (block)


State 130

   25 loop_stmt: T_ITERATE close block T_WHILE expr •
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 25 (loop_stmt)

    comparison  go to state 75


State 131

   69 vector: T_CREATEVECTOR T_LPAREN type_specifier T_RPAREN T_LSBRACKET • T_INTEGER_VAL T_RSBRACKET

    T_INTEGER_VAL  shift, and go to state 142


State 132

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier T_RPAREN T_LSBRACKET • T_INTEGER_VAL T_COMMA T_INTEGER_VAL T_RSBRACKET

    T_INTEGER_VAL  shift, and go to state 143


State 133

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr
   64 call_args: call_args T_COMMA expr •

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 64 (call_args)

    comparison  go to state 75


State 134

   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr
   72 matrix_access: ident T_LSBRACKET expr T_COMMA expr • T_RSBRACKET

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73
    T_RSBRACKET  shift, and go to state 144

    comparison  go to state 75


State 135

   17 var_decl: ident T_COLON type_specifier T_ASSIGN expr •
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 68
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    $default  reduce using rule 17 (var_decl)

    comparison  go to state 75


State 136

   13 func_decl: T_FUNCTION ident T_LPAREN func_decl_args T_RPAREN close • block T_FUNCTION T_END
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82
    T_INDENT   shift, and go to state 83

    block  go to state 145


State 137

   16 func_decl_args: func_decl_args T_COMMA var_decl •

    $default  reduce using rule 16 (func_decl_args)


State 138

   23 conditional: T_IF expr T_THEN close block T_ELSE • close block T_IF_END T_END

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 146


State 139

   22 conditional: T_IF expr T_THEN close block T_IF_END • T_END

    T_END  shift, and go to state 147


State 140

   24 loop_stmt: T_ITERATE T_WHILE expr close block T_ITERATE • T_END

    T_END  shift, and go to state 148


State 141

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM • expr T_MINUS T_TO close block T_ITERATE T_END

    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 149
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 142

   69 vector: T_CREATEVECTOR T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL • T_RSBRACKET

    T_RSBRACKET  shift, and go to state 150


State 143

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL • T_COMMA T_INTEGER_VAL T_RSBRACKET

    T_COMMA  shift, and go to state 151


State 144

   72 matrix_access: ident T_LSBRACKET expr T_COMMA expr T_RSBRACKET •

    $default  reduce using rule 72 (matrix_access)


State 145

   13 func_decl: T_FUNCTION ident T_LPAREN func_decl_args T_RPAREN close block • T_FUNCTION T_END

    T_FUNCTION  shift, and go to state 152


State 146

   23 conditional: T_IF expr T_THEN close block T_ELSE close • block T_IF_END T_END
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82
    T_INDENT   shift, and go to state 83

    block  go to state 153


State 147

   22 conditional: T_IF expr T_THEN close block T_IF_END T_END •

    $default  reduce using rule 22 (conditional)


State 148

   24 loop_stmt: T_ITERATE T_WHILE expr close block T_ITERATE T_END •

    $default  reduce using rule 24 (loop_stmt)


State 149

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr • T_MINUS T_TO close block T_ITERATE T_END
   46 binop_expr: expr • T_AND expr
   47           | expr • T_OR expr
   48           | expr • T_PLUS expr
   49           | expr • T_MINUS expr
   50           | expr • T_MUL expr
   51           | expr • T_DIV expr
   52           | expr • T_MODULUS expr
   59 boolean_expr: expr • comparison expr

    T_EQ         shift, and go to state 61
    T_NOTEQ      shift, and go to state 62
    T_LESS       shift, and go to state 63
    T_LESSEQ     shift, and go to state 64
    T_GREATER    shift, and go to state 65
    T_GREATEREQ  shift, and go to state 66
    T_PLUS       shift, and go to state 67
    T_MINUS      shift, and go to state 154
    T_DIV        shift, and go to state 69
    T_MUL        shift, and go to state 70
    T_MODULUS    shift, and go to state 71
    T_AND        shift, and go to state 72
    T_OR         shift, and go to state 73

    comparison  go to state 75


State 150

   69 vector: T_CREATEVECTOR T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_RSBRACKET •

    $default  reduce using rule 69 (vector)


State 151

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_COMMA • T_INTEGER_VAL T_RSBRACKET

    T_INTEGER_VAL  shift, and go to state 155


State 152

   13 func_decl: T_FUNCTION ident T_LPAREN func_decl_args T_RPAREN close block T_FUNCTION • T_END

    T_END  shift, and go to state 156


State 153

   23 conditional: T_IF expr T_THEN close block T_ELSE close block • T_IF_END T_END

    T_IF_END  shift, and go to state 157


State 154

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS • T_TO close block T_ITERATE T_END
   49 binop_expr: expr T_MINUS • expr

    T_TO            shift, and go to state 158
    T_LPAREN        shift, and go to state 5
    T_NOT           shift, and go to state 6
    T_IDENTIFIER    shift, and go to state 7
    T_TRUE          shift, and go to state 8
    T_FALSE         shift, and go to state 9
    T_INTEGER_VAL   shift, and go to state 10
    T_RATIONAL_VAL  shift, and go to state 11
    T_CREATEVECTOR  shift, and go to state 12
    T_CREATEMATRIX  shift, and go to state 13

    ident          go to state 36
    expr           go to state 99
    binop_expr     go to state 25
    boolean_expr   go to state 26
    unaryop_expr   go to state 27
    func_call      go to state 28
    numeric        go to state 29
    logical        go to state 30
    vector         go to state 31
    vector_access  go to state 38
    matrix         go to state 33
    matrix_access  go to state 39


State 155

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_COMMA T_INTEGER_VAL • T_RSBRACKET

    T_RSBRACKET  shift, and go to state 159


State 156

   13 func_decl: T_FUNCTION ident T_LPAREN func_decl_args T_RPAREN close block T_FUNCTION T_END •

    $default  reduce using rule 13 (func_decl)


State 157

   23 conditional: T_IF expr T_THEN close block T_ELSE close block T_IF_END • T_END

    T_END  shift, and go to state 160


State 158

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO • close block T_ITERATE T_END

    T_NEWLINE  shift, and go to state 41
    T_COMMA    shift, and go to state 42

    close  go to state 161


State 159

   71 matrix: T_CREATEMATRIX T_LPAREN type_specifier T_RPAREN T_LSBRACKET T_INTEGER_VAL T_COMMA T_INTEGER_VAL T_RSBRACKET •

    $default  reduce using rule 71 (matrix)


State 160

   23 conditional: T_IF expr T_THEN close block T_ELSE close block T_IF_END T_END •

    $default  reduce using rule 23 (conditional)


State 161

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO close • block T_ITERATE T_END
   33 close: close • T_NEWLINE

    T_NEWLINE  shift, and go to state 82
    T_INDENT   shift, and go to state 83

    block  go to state 162


State 162

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO close block • T_ITERATE T_END

    T_ITERATE  shift, and go to state 163


State 163

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO close block T_ITERATE • T_END

    T_END  shift, and go to state 164


State 164

   26 loop_stmt: T_ITERATE ident T_ASSIGN expr T_MINUS T_FROM expr T_MINUS T_TO close block T_ITERATE T_END •

    $default  reduce using rule 26 (loop_stmt)
